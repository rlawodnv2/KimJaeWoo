import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.IntStream;

import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;


public class HttpClientTemplate implements WebServiceInfra {
	
	/**
	 * @description JSON HTTPCLIENT CONNECTION 
	 * @param url      - Request URL (필수)
	 *       ,json     - JSONObject 값 (필수)
	 *       ,enc      - 기본 utf-8   설정 값 없을 시 null처리
	 *       ,timeout  - 기본 10000ms 설정 값 없을 시 0으로 처리 
	 * @author 김재우
	 * @since 2023-03-14
	 */
	public String jsonConnect(String url, JSONObject json, String enc, int timeout) {
		AtomicInteger index 			= new AtomicInteger(0);
		ArrayList<String> dataKeyList	= new ArrayList<>();
		ArrayList<String> dataValueList	= new ArrayList<>();
		ArrayList<Object> dataValueObj	= new ArrayList<>();
		HttpPost post					= new HttpPost(url);
		List<NameValuePair> params		= new ArrayList<>();
		HttpResponse response;
		HttpEntity postEntity;
		HttpClient client				= HttpClientBuilder.create().build();

		enc								= StringUtils.isEmpty(enc) ? "utf-8" : enc;
		timeout							= timeout == 0 ? 10000 : timeout;
		try {
			//api call
			post.setHeader("Accept", "application/json");
			post.setHeader("Connection", "keep-alive");
			post.setHeader("Content-Type", "application/x-www-form-urlencoded;charset="+enc);
			
			Iterator<?> iterator		= json.keys();

			while(iterator.hasNext()) {
				String key				= iterator.next().toString();
				dataKeyList.add(key);
			}

			log.info("//============================================");
			log.info("||      HTTPCLIENT JSON DATA CHECK LIST     ||");
			log.info("============================================//");
			IntStream.range(0, dataKeyList.size()).boxed().forEach(i -> {
				if( checkType( json.get(dataKeyList.get(i)) ).equals("String") || checkType( json.get(dataKeyList.get(i)) ).equals("Integer") ) {
					
					dataValueList.add( json.getString( dataKeyList.get(i) ) );
					log.info( dataKeyList.get(i) + " : " + json.getString( dataKeyList.get(i) ) );

					params.add( new BasicNameValuePair( dataKeyList.get(i), json.getString( dataKeyList.get(i) ) ) );
				}
				else if( checkType( json.get(dataKeyList.get(i)) ).equals("JSONArray") ) {

					dataValueObj.add( json.getJSONArray( dataKeyList.get(i) ) );
					log.info( dataKeyList.get(i) + " : " + json.getJSONArray( dataKeyList.get(i) ) );

					params.add( new BasicNameValuePair( dataKeyList.get(i), dataValueObj.get(index.get()).toString() ) );
					index.incrementAndGet();
				}
			});
			log.info("//============================================");
			log.info("|| END   HTTPCLIENT JSON DATA CHECK LIST    ||");
			log.info("============================================//");

			postEntity					= new UrlEncodedFormEntity(params, enc);
			post.setEntity(postEntity);
			client.getConnectionManager().closeIdleConnections(timeout, TimeUnit.MILLISECONDS);
			response					= client.execute(post);

			HttpEntity entity		= response.getEntity();
			String result			= EntityUtils.toString(entity);
			
			int statusCode				= response.getStatusLine().getStatusCode();
			if(statusCode != 200 && statusCode != 201) {
				//API CALL ERROR
				throw new Exception();
			}
			return result;
			
		} catch(Exception e) {
			//api call close exception
			log.error("HTTPCLIENT JSON API CALL ERROR {}",e);
			throw new Exception("HTTPCLIENT JSON ERROR");
		} finally {
			//Important: Close the connect
			client.getConnectionManager().shutdown();
		}
	}
	
	public String connect(String apiUrl, Map<String,String> params, String enc, int timeout) throws ClientProtocolException, IOException {
		HttpClient client	= HttpClientBuilder.create().build();
		HttpPost post		= new HttpPost(apiUrl);
		enc					= StringUtils.isEmpty(enc) ? "utf-8" : enc;
		timeout				= timeout == 0 ? 10000 : timeout;
		
		//파라미터 설정
		List<NameValuePair> paramList = new ArrayList<>();
		for(String key : params.keySet()) {
			paramList.add(new BasicNameValuePair(key, params.get(key)));
		}
		
		post.setEntity(new UrlEncodedFormEntity(paramList, enc));
		//TIMEOUT 처리
		client.getConnectionManager().closeIdleConnections(timeout, TimeUnit.MILLISECONDS);
		//API 호출 및 응답 처리
		HttpResponse response	= client.execute(post);
		HttpEntity entity		= response.getEntity();
		String result			= EntityUtils.toString(entity);
		
		return result;
	}
	
	private static String checkType(Object obj) {

		if(obj.getClass().getName().contains("String")) {
			return "String";
		}
		else if(obj.getClass().getName().contains("ArrayList")){
			return "ArrayList";
		}
		else if(obj.getClass().getName().contains("JSONArray")){
			return "JSONArray";
		}
		else if(obj.getClass().getName().contains("HashMap")) {
			return "HashMap";
		}
		else if(obj.getClass().getName().contains("Integer")) {
			return "Integer";
		}

		return "unknown";
	}
}
